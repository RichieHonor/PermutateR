devtools::document()
traceback()
devtools::document()
devtools::document()
warnings()
warnings()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::install("PermutateR")
devtools::install("PermutateR")
devtools::install(".")
e(1)
exp(1)
log(exp(1))
log(40)
exp(log(40))
log10(100)
devtools::update_packages()
1
devtools::update_packages()
devtools::install()
devtools::load_all()
library("PermutateR")
Variable<-as.name(Variable)
devtools::document()
print("f")
df<-data.frame(a=1:10,b=11:20)
df
sample(df)
sample(df)
sample(df)
apply(df,2,sample)
apply(df,2,sample)
apply(df,2,sample)
apply(df,2,sample)
df[[c("a","b")]]
df[,c("a","b")]
df[,!c("a","b")]
apply(df[["a"]],2,sample)
apply(df[["a"]],2,sample)
apply(df[,"a"],2,sample)
apply(df,2,sample)
apply(df$a,2,sample)
apply(df[,c("a","b")],2,sample)
df<-data.frame(a=1:10,b=11:20,c=21:30)
apply(df[,c("a","b")],2,sample)
df[,c("a","b")]
=dplyr::select(df,"a")
dplyr::select(df,"a")
dplyr::select(df,!"a") #dplyr will do the trick and then can sample over desired columns without need for a for loop.
data.frame(a=1:10,b=11:20,c=21:30)
col<-c("a","b")
dplyr::select(df,col) #dplyr will do the trick and then can sample over desired columns without need for a for loop.
col<-c("a","b")
dplyr::select(df,col) #dplyr will do the trick and then can sample over desired columns without need for a for loop.
df<-data.frame(a=1:10,b=11:20,c=21:30)
col<-c("a","b")
dplyr::select(df,col) #dplyr will do the trick and then can sample over desired columns without need for a for loop.
dplyr::select(df,!col) #dplyr will do the trick and then can sample over desired columns without need for a for loop.
apply(df,2,sample)
devtools::document()
devtools::document()
devtools::document()
library("devtools")
install_github("DeveloperName/PackageName")
install_github("RichieHonor/PermutateR")
X2=rep(c("a","b"),each=500)
#A numeric variable :
x1 = y1 + rnorm(1000)
y1 = rnorm(1000)
y2= rpois(1000)
y1 = rnorm(1000)
#X (independent) variables:
#A numeric variable :
x1 = y1 + rnorm(1000)
# A Categorical variable
X2=rep(c("a","b"),each=500)
y1 = rnorm(1000)
#X (independent) variables:
#A numeric variable :
x1 = y1 + rnorm(1000)
# A Categorical variable
X2=rep(c("a","b"),each=500)
#Generate data frame
Data<-data.frame(y1,x1,x2)
# A Categorical variable
x2=rep(c("a","b"),each=500)
#Generate data frame
Data<-data.frame(y1,x1,x2)
Data
plot(y1~x1)
library(PermutateR)
#Fit model
Fit<-lm(y1~x1+x2)
permTest_LR_int(fit,"x1","x1","p-value",10)
permTest_LR_int(Fit,"x1","x1","p-value",10)
permTest_LR_int(Fit,"x1","x1","Pr(>F)",10)
library(dplyr)
permTest_LR_int(Fit,"x1","x1","Pr(>F)",10)
library(ggplot2)
permTest_LR_int(Fit,"x1","x1","Pr(>F)",10)
permTest_LR_int(Fit,"x1:x2","x1","Pr(>F)",10)
#Fit model
Fit<-lm(y1~x1*x2)
permTest_LR_int(Fit,"x1:x2","x1","Pr(>F)",10)
permTest_LR_int(Fit,"x1","x1","Pr(>F)",10)
#Testing effect
Fit<-lm(y1~x1)
permTest_LR_int(Fit,"x1","x1","Pr(>F)",10)
permTest_Contrast(Fit,"x1","x1","Pr(>F)",10)
#Testing only the coefficient from the summary output (i.e. the contrast)
Fit<-lm(y1~x1)
permTest_Contrast(Fit,"x1","x1","Pr(>F)",10)
permTest_Contrast(Fit,"x1","x1","Pr(>|t|)",10)
permTest_LR(Fit,"x1","x1","Pr(>F)",10)
#Testing Main effect using likelyhood ratio test (can be performed using the other function, but this one is ~50% faster)
Fit<-lm(y1~x1)
permTest_LR(Fit,"x1","x1","Pr(>F)",10)
#Testing Main effect using likelyhood ratio test (can be performed using the other function, but this one is ~50% faster)
Fit<-lm(y1~x1)
permTest_LR(Fit,"x1","Pr(>F)",10)
Fit<-glm(y1~x1*x2)
permTest_LR_int(Fit,"x1:x2","x1","Pr(>F)",10)
permTest_LR_int(Fit,"x1:x2","x1","Deviance",10)
Fit<-glmmTMB(y1~x1*x2)
library(glmmTMB)
permTest_LR_int(Fit,"x1:x2","x1","Deviance",10)
summary(fit)
summary(Fit)
permTest_LR_int(Fit,"x1:x2","x1","t value",10)
Fit<-glmmTMB(y1~x1*x2)
permTest_LR_int(Fit,"x1:x2","x1","t value",10)
permTest_LR_int(Fit,"x1:x2","x1","Pr(>Chisq)",10)
summary(Fit)
Fit<-lmer(y1~x1*x2)
Fit<-Lmer(y1~x1*x2)
Fit<-lmer(y1~x1*x2)
Fit<-glmer(y1~x1*x2)
library(lme4)
Fit<-lmer(y1~x1*x2)
Fit<-lmer(y1~x1+(1|x2))
Fit<-lmer(y1~x1+(1|x2))
permTest_LR_int(Fit,"x1:x2","x1","Pr(>Chisq)",10)
Fit<-lmer(y1~x1:x2+(1|x2))
permTest_LR_int(Fit,"x1:x2","x1","Pr(>Chisq)",10)
Fit<-glm(y1~x1)
permTest_LR_int(Fit,"x1","Deviance",10)
permTest_LR_int(Fit,"x1","Deviance",10)
Fit<-glm(y1~x1)
permTest_LR_int(Fit,"x1","Deviance",10)
permTest_LR(Fit,"x1","Deviance",10)
Fit<-glmmTMB(y1~x1)
permTest_LR(Fit,"x1","Pr(>Chisq)",10)
Fit<-glm(y1~x1)
permTest_Contrast(Fit,"x1","Deviance",10)
Fit<-glm(y1~x1)
permTest_Contrast(Fit,"x1","Pr(>|t|)",10)
Fit<-glm(y1~x1)
permTest_Contrast(Fit,"x1","x1","Pr(>|t|)",10)
Fit<-glmmTMB(y1~x1)
permTest_Contrast(Fit,"x1","x1","Pr(>|t|)",10)
permTest_Contrast(Fit,"x1","x1","Pr(>|t|)",10)
permTest_Contrast(Fit,"x1","x1","Pr(>|z|)",10)
summary(Fit)
Fit<-glmmTMB(y1~x1)
permTest_Contrast(Fit,"x1","x1","Pr(>|z|)",10)
summary(Fit)
